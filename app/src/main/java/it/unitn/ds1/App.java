/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unitn.ds1;

import java.util.Collections;

import it.unitn.ds1.Replicas.types.Crash;
import it.unitn.ds1.SimulationController.SimulationController;


public class App {
        // to pass arbitrary arguments in gradle run --args='-c 3 -r 4'
        final private static int N_CLIENTS = 3;
        final private static int N_REPLICAS = 5;

        public static void main(String[] args) {
            int[] parsedArgs = parseArguments(args);
            int numberOfClients = parsedArgs[0];
            int numberOfReplicas = parsedArgs[1];
            
            // No crash
            Crash[] noCrashes = Collections.nCopies(numberOfReplicas, Crash.NO_CRASH).toArray(new Crash[0]);

            // Align replicas crash
            Crash[] coordAlignAllReplicas = { Crash.NO_WRITE, Crash.NO_WRITE, Crash.NO_CRASH, Crash.NO_WRITE, Crash.COORDINATOR_AFTER_N_WRITE_OK };

            // Coordinator crash after heartbeat
            Crash[] coordCrashAfterHB = {Crash.NO_CRASH, Crash.NO_CRASH, Crash.NO_CRASH, Crash.NO_CRASH, Crash.COORDINATOR_AFTER_HEARTBEAT};

            // Coordinator crash after update
            Crash[] coordCrashAfterUpdate = { Crash.NO_CRASH, Crash.NO_CRASH, Crash.NO_CRASH, Crash.NO_CRASH, Crash.COORDINATOR_AFTER_UPDATE_MESSAGE };

            // Coordinator crash before update
            Crash[] coordCrashBeforeUpdate = { Crash.NO_CRASH, Crash.NO_CRASH, Crash.NO_CRASH, Crash.NO_CRASH, Crash.COORDINATOR_BEFORE_UPDATE_MESSAGE };

            // Coordinator crash during update multicast
            Crash[] coordCrashDuringUpdateMulticast = { Crash.NO_CRASH, Crash.NO_CRASH, Crash.NO_CRASH, Crash.NO_CRASH, Crash.COORDINATOR_CRASH_MULTICASTING_UPDATE };

            // Multiple coordinators crash
            Crash[] multipleCoordinatorCrash = { Crash.NO_CRASH, Crash.NO_CRASH, Crash.NO_CRASH, Crash.NO_CRASH, Crash.NO_CRASH, Crash.COORDINATOR_BEFORE_WRITEOK_MESSAGE, Crash.COORDINATOR_BEFORE_WRITEOK_MESSAGE, Crash.COORDINATOR_AFTER_N_WRITE_OK };

            // Replica crash after forward message, coordinator crash after update message
            Crash[] replicaAndCoordinatorCrashes = { Crash.NO_CRASH, Crash.REPLICA_AFTER_FORWARD_MESSAGE, Crash.NO_CRASH, Crash.NO_CRASH, Crash.COORDINATOR_AFTER_UPDATE_MESSAGE };

            // Replica crash after receiving an election message
            Crash[] replicaCrashAfterElectionMessage = { Crash.NO_CRASH, Crash.NO_CRASH, Crash.NO_CRASH, Crash.REPLICA_ON_ELECTION_MESSAGE, Crash.NO_CRASH };

            // Replica crash before forwarding an election message
            Crash[] replicaCrashBeforeForwardelectionMessage = { Crash.NO_CRASH, Crash.NO_CRASH, Crash.NO_CRASH, Crash.NO_CRASH, Crash.REPLICA_BEFORE_FORWARD_ELECTION_MESSAGE };

            // 2 replicas crash before sending an ack for an update message
            Crash[] replicaCrashBeforeAck = { Crash.NO_CRASH, Crash.NO_CRASH, Crash.REPLICA_ON_UPDATE_MESSAGE, Crash.REPLICA_ON_UPDATE_MESSAGE, Crash.NO_CRASH };

            // 2 consecutive replicas crash during the election phase
            Crash[] twoConsecutiveReplicaCrash = { Crash.NO_CRASH, Crash.NO_CRASH, Crash.NO_CRASH, Crash.REPLICA_AFTER_ACK_ELECTION_MESSAGE, Crash.REPLICA_ON_ELECTION_MESSAGE };

            Crash[] current_crash = noCrashes; // Change scenario here
            SimulationController simulationController = new SimulationController(numberOfClients, current_crash.length, current_crash, "normal_run", false);

            simulationController.run();
        }

        private static int[] parseArguments(String[] args) {
            int numberOfClients = N_CLIENTS;
            int numberOfReplicas = N_REPLICAS;

            for (int i = 0; i < args.length; i++) {
                switch (args[i]) {
                    case "-c":
                        if (i + 1 < args.length) {
                            numberOfClients = Integer.parseInt(args[++i]);
                        }
                        break;

                    case "-r":
                        if (i + 1 < args.length) {
                            numberOfReplicas = Integer.parseInt(args[++i]);
                        }
                        break;

                    default:
                        System.out.println("Error: Unknown argument " + args[i]);
                        return null;
                }
            }

            return new int[] { numberOfClients, numberOfReplicas };
        }
}
